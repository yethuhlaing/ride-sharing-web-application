generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
}

model User {
  id                String          @id @unique
  email             String          @unique
  fullName          String?
  phone             String?         @unique
  userBio           String?
  profileImage      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  stripeCustomerId  String?         @unique
  Subscription      Subscription?
  ridesAsDriver     Ride[]          @relation("DriverRides")
  ridesAsPassenger  Ride[]          @relation("PassengerRides")
  vehicles          Vehicle[]
  payments          Payment[]
  reviewsGiven      Review[]        @relation("ReviewFrom")
  reviewsReceived   Review[]        @relation("ReviewTo")
}

model Vehicle {
  id          String      @id @default(uuid())
  brand       String
  model       String?
  color       String?
  year        Int?
  licensePlate String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  rides       Ride[]
}

model Ride {
  id            String      @id @default(uuid())
  driverId      String
  driver        User     @relation("DriverRides", fields: [driverId], references: [id])
  passengerId   String
  passenger     User     @relation("PassengerRides", fields: [passengerId], references: [id])
  vehicleId     String
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id])
  startLocationId Int
  startLocation Location @relation("StartLocation", fields: [startLocationId], references: [id])
  endLocationId Int
  endLocation   Location @relation("EndLocation", fields: [endLocationId], references: [id])
  startTime     DateTime
  endTime       DateTime
  fare          Float
  status        RideStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payment       Payment?
  reviews       Review[]
}

model Location {
  id        Int      @id @default(autoincrement())
  latitude  Float
  longitude Float
  address   String
  startRides  Ride[] @relation("StartLocation")
  endRides    Ride[] @relation("EndLocation")
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  method    PaymentMethod
  rideId    String      @unique
  ride      Ride     @relation(fields: [rideId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id])
}
model Review {
  id        String      @id @default(uuid())
  rating    Int
  comment   String
  fromUserId String
  fromUser  User     @relation("ReviewFrom", fields: [fromUserId], references: [id])
  toUserId  String
  toUser    User     @relation("ReviewTo", fields: [toUserId], references: [id])
  rideId    String      @unique
  ride      Ride     @relation(fields: [rideId], references: [id])
  createdAt DateTime @default(now())
}

enum RideStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  CASH
}
