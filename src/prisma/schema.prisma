generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
}
enum Plan {
  free
  basic
  premium
}

model User {
  user_id           String          @id @default(uuid())
  email             String          @unique
  fullName          String?
  phone             String?         @unique
  userBio           String?
  profileImage      String?      
  plan              Plan            @default(free)   
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  stripeCustomerId  String?         @unique
  Subscription      Subscription?
  vehicles          Vehicle[]
  bookings          Booking[]
  rides             Ride[]          @relation("DriverRides")
  reviews           Review[]
  messages          Message[]       @relation("UserMessages")
  driverChatRooms   ChatRoom[]      @relation("DriverChatRooms")
  passengerChatRooms ChatRoom[]     @relation("PassengerChatRooms")
}

model Vehicle {
  vehicle_id       String      @id @default(uuid())
  brand            String
  model            String?
  licensePlate     String?
  user_id          String
  user             User     @relation(fields: [user_id], references: [user_id])
}

model Ride {
  ride_id         String     @id @default(uuid())
  driver_id       String
  origin          String
  destination     String
  departure_time  DateTime
  available_seats Int
  driver          User       @relation(fields: [driver_id], references: [user_id], name: "DriverRides")
  bookings        Booking[]
  reviews         Review[]
}

enum Status {
  Pending
  Confirmed
  Declined
}

model Booking {
  booking_id    String   @id @default(uuid())
  ride_id       String
  passenger_id  String
  createdAt     DateTime @default(now())
  status        Status   
  ride          Ride     @relation(fields: [ride_id], references: [ride_id])
  passenger     User     @relation(fields: [passenger_id], references: [user_id])

  @@unique([ride_id, passenger_id]) // Unique constraint for ride_id and passenger_id combination
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  plan                 Plan
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user_id              String   @unique
  user                 User     @relation(fields: [user_id], references: [user_id])
}

model Review {
  review_id     Int      @id @default(autoincrement())
  ride_id       String
  passenger_id  String
  rating        Int
  comment       String?
  ride          Ride     @relation(fields: [ride_id], references: [ride_id])
  passenger     User     @relation(fields: [passenger_id], references: [user_id])

  @@unique([ride_id, passenger_id]) 
}



model ChatRoom {
  chat_room_id      String    @id @default(uuid())
  name              String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  messages          Message[] @relation("ChatRoomMessages")
  driver_id         String
  passenger_id      String
  driver            User      @relation("DriverChatRooms", fields: [driver_id], references: [user_id])
  passenger         User      @relation("PassengerChatRooms", fields: [passenger_id], references: [user_id])
}

model Message {
  message_id    String   @id @default(uuid())
  content       String
  is_edit       Boolean  @default(false)
  createdAt     DateTime @default(now())
  sender_id     String
  chat_room_id  String
  sender        User     @relation("UserMessages", fields: [sender_id], references: [user_id])
  chatRoom      ChatRoom @relation("ChatRoomMessages", fields: [chat_room_id], references: [chat_room_id])
}